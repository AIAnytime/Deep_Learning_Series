# -*- coding: utf-8 -*-
"""CNN Fundamentals Implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101ydJDIqCQwsNBmYSTW90jL9p8pjkPqE
"""

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Convolution2D, Activation, MaxPool2D

import numpy as np
from numpy import asarray
import matplotlib.pyplot as plt

import cv2

#Reading one image
img = cv2.imread("lena.png", cv2.IMREAD_GRAYSCALE)

img = img
plt.imshow(img, cmap='gray')
plt.show()

#finding the shape of the image
img.shape

#keras expects batches of image so let's add one more dimensions to make one image into a batch
img_batch = img.reshape(1, img.shape[0], img.shape[1], 1)
img_batch.shape

#creating the convolution model
model = Sequential()
model.add(Convolution2D(1, (15,15), padding='valid', input_shape = img_batch.shape[1:]))
model.summary()

conv_img = model.predict(img_batch)

conv_img.shape

#reshape and show the output of convolution operation
conv_img_show = conv_img.reshape(conv_img.shape[1], conv_img.shape[2])
print(conv_img_show)

plt.imshow(conv_img_show, cmap='gray')
plt.show()

"""#### Let's apply activation function now. Rectified linear unit in this case."""

model1 = Sequential()
model1.add(Convolution2D(1, (15,15), padding='valid', input_shape = img_batch.shape[1:]))
model1.add(Activation('relu'))
model1.summary()

conv_img1 = model1.predict(img_batch)

#reshape and show the output of convolution operation
conv_img_show1 = conv_img1.reshape(conv_img1.shape[1], conv_img1.shape[2])
print(conv_img_show1)

plt.imshow(conv_img_show1, cmap='gray')
plt.show()

"""#### After applying RELU, the image turns little darker because negative (minus) values after convolution operation will be replaced by zero."""

#combining both relu and maxpooling on a convoluted image

model2 = Sequential()
model2.add(Convolution2D(1, (15,15), padding='valid', input_shape = img_batch.shape[1:]))
model2.add(Activation('relu'))
model2.add(MaxPool2D(pool_size=(2,2)))
model2.summary()

conv_img2 = model2.predict(img_batch)

#reshape and show the output of convolution operation
conv_img_show2 = conv_img2.reshape(conv_img2.shape[1], conv_img2.shape[2])
print(conv_img_show2)

plt.imshow(conv_img_show2, cmap='gray')
plt.show()

